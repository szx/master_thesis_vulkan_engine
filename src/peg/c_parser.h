/* A packrat parser generated by PackCC 1.6.0 */

#ifndef PCC_INCLUDED__HOME_SSZCZYRB_REPOS_CPPTEST_SRC_PEG_C_PARSER_H
#define PCC_INCLUDED__HOME_SSZCZYRB_REPOS_CPPTEST_SRC_PEG_C_PARSER_H

typedef struct c_parser_state
{
  // Input state
  char *source;           // null-terminated string
  size_t source_length;   // length of source
  char *current;          // current character in source
  size_t current_index;   // index of current character in source
} c_parser_state;

typedef enum c_parser_ast_node_type {
  c_parser_ast_node_type_Unknown, // UNKNOWN
  c_parser_ast_node_type_String, // STRING
  c_parser_ast_node_type_Identifier, // IDENTIFIER
  c_parser_ast_node_type_Integer, // NUMBER

  c_parser_ast_node_type_SingleComment, // //...
  c_parser_ast_node_type_MultiComment, // /*...*/
  c_parser_ast_node_type_PreprocessorDirective, // #directive

  // bitwise operators
  c_parser_ast_node_type_BitOr, // |
  c_parser_ast_node_type_BitAnd, // &
  c_parser_ast_node_type_BitXor, // ^
  c_parser_ast_node_type_BitShiftLeft, // <<
  c_parser_ast_node_type_BitShiftRight, // >>
  c_parser_ast_node_type_BitNot, // ~

  // logical operators
  c_parser_ast_node_type_Not, // !
  c_parser_ast_node_type_Or, // ||
  c_parser_ast_node_type_And, // &&

  // unary arithmetic operators
  c_parser_ast_node_type_Plus, // +
  c_parser_ast_node_type_Minus, // -
  c_parser_ast_node_type_Inc, // ++
  c_parser_ast_node_type_Dec, // --

  // binary arithmetic operators
  c_parser_ast_node_type_Add, // +
  c_parser_ast_node_type_Sub, // -
  c_parser_ast_node_type_Mul, // *
  c_parser_ast_node_type_Div, // /
  c_parser_ast_node_type_Mod, // %

  // assignment operators
  c_parser_ast_node_type_Assign, // ==
  c_parser_ast_node_type_AssignAdd, // +=
  c_parser_ast_node_type_AssignSub , // -=
  c_parser_ast_node_type_AssignMul, // *=
  c_parser_ast_node_type_AssignDiv, // /=
  c_parser_ast_node_type_AssignMod, // %=
  c_parser_ast_node_type_AssignBitOr, // |=
  c_parser_ast_node_type_AssignBitAnd, // %=
  c_parser_ast_node_type_AssignBitXor, // ^=
  c_parser_ast_node_type_AssignBitLeftShift, // <<=
  c_parser_ast_node_type_AssignBitRightShift, // >>=

// comparison operators
  c_parser_ast_node_type_EQ, // ==
  c_parser_ast_node_type_NE, // !=
  c_parser_ast_node_type_LT, // <
  c_parser_ast_node_type_GT, // >
  c_parser_ast_node_type_LE, // <=
  c_parser_ast_node_type_GE, // >=
} c_parser_ast_node_type;

typedef struct c_parser_str_range
{
  size_t begin; // inclusive
  size_t end;   // exclusive
} c_parser_str_range;

typedef struct c_parser_ast_node
{
  c_parser_ast_node_type type;      // AST node type
  c_parser_str_range range;
  struct c_parser_ast_node *node1;  // first child node
  struct c_parser_ast_node *node2;  // second child node
} c_parser_ast_node;
#ifdef __cplusplus
extern "C" {
#endif

typedef struct c_parser_context_tag c_parser_context_t;

c_parser_context_t *c_parser_create(c_parser_state *auxil);
int c_parser_parse(c_parser_context_t *ctx, c_parser_ast_node **ret);
void c_parser_destroy(c_parser_context_t *ctx);

#ifdef __cplusplus
}
#endif

#endif /* !PCC_INCLUDED__HOME_SSZCZYRB_REPOS_CPPTEST_SRC_PEG_C_PARSER_H */
