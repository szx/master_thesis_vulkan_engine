%prefix "c_parser"

%auxil "c_parser_state *"
%value "c_parser_ast_node *"

%header {
  #include "../c_parser_internal.h"
}

%source {
  #define PCC_GETCHAR(auxil) c_parser_getchar((auxil))
  //static const char *dbg_str[] = { "Evaluating rule", "Matched rule", "Abandoning rule" };
  //#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
      fprintf(stderr, "%*s%s %s @%zu [%.*s]\n", (int)((level) * 2), "", dbg_str[event], rule, pos, (int)(length), buffer)

}

statement <- _ e:expression _ EOL* { c_parser_ast_node_debug_print(auxil, e, 0); }
           / .* EOF      { printf("eof\n"); }

expression <- e:term { $$ = e; }

term <-
  l:term _ '+' _ r:factor { $$ = c_parser_ast_node_init_binary(auxil, c_parser_ast_node_type_Add, c_parser_str_range_init($0s, $0e), l, r); }
/ l:term _ '-' _ r:factor { $$ = c_parser_ast_node_init_binary(auxil, c_parser_ast_node_type_Sub, c_parser_str_range_init($0s, $0e), l, r); }
/ e:factor                { $$ = e; }

factor <-
  l:factor _ '*' _ r:unary { $$ = c_parser_ast_node_init_binary(auxil, c_parser_ast_node_type_Mul, c_parser_str_range_init($0s, $0e), l, r); }
/ l:factor _ '/' _ r:unary { $$ = c_parser_ast_node_init_binary(auxil, c_parser_ast_node_type_Div, c_parser_str_range_init($0s, $0e), l, r); }
/ e:unary                  { $$ = e; }

unary <-
  '+' _ e:unary { $$ = c_parser_ast_node_init_unary(auxil, c_parser_ast_node_type_Plus, c_parser_str_range_init($0s, $0e), e); }
/ '-' _ e:unary { $$ = c_parser_ast_node_init_unary(auxil, c_parser_ast_node_type_Minus, c_parser_str_range_init($0s, $0e), e);; }
/ e:primary     { $$ = e; }

primary <-
< [0-9]+ > { $$  = c_parser_ast_node_init_terminal(auxil, c_parser_ast_node_type_Integer, c_parser_str_range_init($0s, $0e)); }
/ '(' _ e:expression _ ')' { $$ = e; }

_      <- [ \t]*
EOL    <- '\n' / '\r\n' / '\r'
EOF    <- !.
