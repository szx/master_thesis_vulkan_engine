// Returns new parser.
c_parser_state c_parser_state_init(char *source);

// Advances by 'n' characters.
void c_parser_advance(c_parser_state *state, size_t n);

// Returns next (or previous) n-th character.
char c_parser_peek(c_parser_state *state, size_t n);

// Peeks current character and advances by 1 character.
char c_parser_getchar(c_parser_state *state);

// Returns new string range.
c_parser_str_range c_parser_str_range_init(size_t begin, size_t end);

// Returns newly allocated AST node.
c_parser_ast_node *c_parser_ast_node_allocate(c_parser_state *state,
                                              c_parser_ast_node_type type,
                                              c_parser_str_range range);

// Returns variadic AST node.
c_parser_ast_node *c_parser_ast_node_init_variadic(c_parser_state *state,
                                                   c_parser_ast_node_type type,
                                                   c_parser_str_range range);

// Appends child AST node to AST node.
void c_parser_ast_node_push_front(c_parser_ast_node *node,
                                  c_parser_ast_node *child_node);

// Returns terminal AST node.
c_parser_ast_node *c_parser_ast_node_init_0(c_parser_state *state,
                                                   c_parser_ast_node_type type,
                                                   c_parser_str_range range);

// Returns unary AST node.
c_parser_ast_node *c_parser_ast_node_init_1(c_parser_state *state,
                                            c_parser_ast_node_type type,
                                            c_parser_str_range range,
                                            c_parser_ast_node *node1);

// Returns binary AST node.
c_parser_ast_node *c_parser_ast_node_init_2(c_parser_state *state,
                                            c_parser_ast_node_type type,
                                            c_parser_str_range range,
                                            c_parser_ast_node *node1,
                                            c_parser_ast_node *node2);

// Returns ternary AST node.
c_parser_ast_node *
c_parser_ast_node_init_3(c_parser_state *state, c_parser_ast_node_type type,
                         c_parser_str_range range, c_parser_ast_node *node1,
                         c_parser_ast_node *node2, c_parser_ast_node *node3);

// Returns quaternary AST node.
c_parser_ast_node *
c_parser_ast_node_init_4(c_parser_state *state, c_parser_ast_node_type type,
                         c_parser_str_range range, c_parser_ast_node *node1,
                         c_parser_ast_node *node2, c_parser_ast_node *node3,
                         c_parser_ast_node *node4);

// Returns debug string for AST node type.
const char *c_parser_ast_node_type_debug_str(c_parser_ast_node_type type);

// Prints node debug info to stdout.
void c_parser_ast_node_debug_print(c_parser_state *state,
                                   c_parser_ast_node *node, size_t indentLevel);

// Stores new parser error in c_parser_state.
void c_parser_handle_error(c_parser_state *state, c_parser_error_type type,
                           c_parser_str_range range);

// Stores new parser syntax error in c_parser_state.
// Used by PCC_ERROR() macro in PackCC parser.
void c_parser_handle_syntax_error(c_parser_state *state);

// Stores new comment in c_parser_state.
void c_parser_handle_comment(c_parser_state *state, c_parser_str_range range);

// Prints parser state to stdout.
void c_parser_debug_print(c_parser_state *state);

